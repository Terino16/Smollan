Q1. Develop a visually appealing and interactive weather application using SvelteKit, Tailwind CSS, and TypeScript. The application should provide users with the ability to: Search for locations by city name or zip code. Display the current weather conditions for the searched location, including: Temperature (Fahrenheit and Celsius) Description (e.g., "Clear skies", "Light rain") Wind speed and direction Humidity UV index Optionally, display a 5-day forecast for the selected location. Technical Stack: Frontend: SvelteKit: For efficient handling of client-side rendering, routing, and data fetching. Tailwind CSS: For a rapid and responsive design system. TypeScript: To enhance code maintainability and type safety. Backend (Optional): Weather API (e.g., OpenWeatherMap, Weather Underground): To retrieve weather data based on user input. Design Considerations: Responsiveness: Ensure the application adapts gracefully to different screen sizes and devices (mobile, tablet, desktop). Accessibility: Follow WCAG guidelines to make the application accessible to users with disabilities. User Interface: Design a clean and user-friendly interface that is easy to navigate and understand. Consider using Tailwind CSS utility classes or custom CSS to style the application. Provide visual feedback to users during interactions (e.g., loading indicators, error messages). Assessment Criteria: Code Quality: Adherence to best practices for SvelteKit, Tailwind CSS, and TypeScript. Proper modularization and organization of code. Effective use of types and interfaces for improved maintainability. Functionality: Complete implementation of the core features (search, current weather display, optional 5-day forecast). Accurate and efficient handling of data fetching from the weather API (if used). User Experience: Responsive and accessible design. Intuitive user interactions. Visually appealing and polished interface. Deployment: Successful deployment to Netlify or Vercel, demonstrating understanding of deployment best practices. Additional Tips: Consider using a state management solution (e.g., Svelte Store) to manage application state effectively. Implement unit tests using a testing framework like Jest to ensure code quality and maintainability. Structure your project using a component-based approach for better maintainability and reusability. Explore advanced SvelteKit features like server-side rendering (SSR) or static site generation (SSG) if applicable. Deployment on Netlify/Vercel: Create a Project: Netlify: Sign up for a free account and create a new project. Vercel: Create a new project by linking your GitHub account or importing an existing project. Connect to Git Repository: Push your project code to a Git repository (e.g., GitHub, GitLab). Connect your Git repository to your chosen platform (Netlify or Vercel). Build and Deploy: Netlify will automatically detect and build your SvelteKit project during deployment. Vercel may require you to configure a build command in your project settings (e.g., npm run build). Access Deployed Application: Once the build is successful, you will be provided with a URL to access your deployed weather application. By following these guidelines and incorporating the assessment criteria, you can create a well-designed and technically sound frontend assessment task that showcases your skills and knowledge in SvelteKit, Tailwind CSS, and TypeScript. Feel free to tailor this task further based on your specific requirements and preferences.